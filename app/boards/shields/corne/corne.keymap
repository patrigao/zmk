/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC 0
#define WIN 1
#define GAME 2
#define NUM 3
#define NAV 4

/*
 * west build -b nice_nano_v2 -d build/left -- -DSHIELD=corne_left 
 * west build -b nice_nano_v2 -d build/right -- -DSHIELD=corne_right
 */

/ {

    behaviors {
        tesc: tilde_escape {
                compatible = "zmk,behavior-mod-morph";
                label = "TILDE_ESCAPE";
                #binding-cells = <1>;
                bindings = <&kp ESC>, <&kp TILDE>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        alt_ret: alt_ret {
            label = "alt_ret";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp RET>
                , <&macro_release &kp LALT>
                ;
        };

        alt_tab: alt_tab {
            label = "alt_tab";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LALT>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac_layer {
            bindings = <
                &tesc     &kp Q  &kp W    &kp E    &kp R    &kp T               &kp Y     &kp U   &kp I     &kp O   &kp P    &kp GRAVE
                &kp TAB   &kp A  &kp S    &kp D    &kp F    &kp G               &kp H     &kp J   &kp K     &kp L   &kp SEMI &kp SQT
                &kp LSHFT &kp Z  &kp X    &kp C    &kp V    &kp B               &kp N     &kp M   &kp COMMA &kp DOT &kp FSLH &kp BSLH
                                    &kp LCTRL &mt LGUI BSPC &mo NUM             &mo NAV &kp SPACE &mt LALT RET
            >;
        };

        windows_layer {
            bindings = <
                &tesc     &kp Q  &kp W    &kp E    &kp R    &kp T               &kp Y     &kp U   &kp I     &kp O   &kp P    &kp GRAVE
                &kp TAB   &kp A  &kp S    &kp D    &kp F    &kp G               &kp H     &kp J   &kp K     &kp L   &kp SEMI &kp SQT
                &kp LSHFT &kp Z  &kp X    &kp C    &kp V    &kp B               &kp N     &kp M   &kp COMMA &kp DOT &kp FSLH &kp BSLH
                                    &kp LGUI &mt LCTRL BSPC &mo NUM             &mo NAV &kp SPACE &mt LALT RET
            >;
        };
        
        game_layer {
            bindings = <
                &tesc     &kp Q  &kp W    &kp E    &kp R    &kp T               &kp Y     &kp U   &kp I     &kp O   &kp P    &kp GRAVE
                &kp TAB   &kp A  &kp S    &kp D    &kp F    &kp G               &kp H     &kp J   &kp K     &kp L   &kp SEMI &kp SQT
                &kp LSHFT &kp Z  &kp X    &kp C    &kp V    &kp B               &kp N     &kp M   &kp COMMA &kp DOT &kp FSLH &kp BSLH
                                        &kp LCTRL &kp SPACE &mo NUM             &mo NAV &mt LGUI BSPC &mt LALT RET
            >;
        };

        num_layer {
            bindings = <
                &trans &kp N1    &kp N2   &kp N3   &kp N4   &kp N5              &kp N6    &kp N7  &kp N8    &kp N9  &kp N0   &trans
                &kp TAB &kp EXCL  &kp AT   &kp HASH &kp DLLR &kp PRCNT         &trans    &kp N4  &kp N5    &kp N6  &kp LBKT &kp RBKT
                &trans &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR            &trans    &kp N1  &kp N2    &kp N3  &kp MINUS &kp EQUAL
                                        &trans   &trans   &trans               &trans    &kp DOT &kp N0
            >;
        };

        nav_layer {
            bindings = <
                &kp F12      &kp F1        &kp F2       &kp F3       &kp F4        &kp F5               &kp F6   &kp F7      &kp F8       &kp F9        &kp F10     &kp F11
                &out OUT_TOG &to MAC       &to WIN      &to GAME     &trans        &bt BT_CLR           &kp LEFT   &kp UP    &kp DOWN     &kp RIGHT     &kp HOME    &kp END
                &trans       &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4         &kp C_PP &kp C_VOL_UP  &kp C_VOL_DN &kp C_PREV  &kp C_NEXT  &trans
                                                                    &trans &trans  &mt LALT DEL             &trans &trans &alt_ret
            >;
        };

    };
};